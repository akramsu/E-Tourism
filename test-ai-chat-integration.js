/**
 * Test AI Chat Integration
 * Tests the complete AI chat flow including Gemini service and database context
 */

const axios = require('axios')

async function testAIChatIntegration() {
  console.log('üß™ Testing AI Chat Integration...')
  
  try {
    // Test 1: Basic chat functionality
    console.log('\n1Ô∏è‚É£ Testing basic chat functionality...')
    const chatResponse = await axios.post('http://localhost:5003/api/authority/chat', {
      message: "Hello! Can you tell me about my tourism data?"
    }, {
      headers: {
        'Content-Type': 'application/json'
      }
    })
    
    console.log('‚úÖ Chat Response:', {
      message: chatResponse.data.message?.substring(0, 100) + '...',
      suggestions: chatResponse.data.suggestions?.length || 0,
      dataInsights: chatResponse.data.dataInsights?.length || 0,
      actionItems: chatResponse.data.actionItems?.length || 0
    })
    
    // Test 2: Tourism-specific query
    console.log('\n2Ô∏è‚É£ Testing tourism-specific query...')
    const tourismResponse = await axios.post('http://localhost:5003/api/authority/chat', {
      message: "What are the most popular attraction categories and their revenue performance?"
    })
    
    console.log('‚úÖ Tourism Query Response:', {
      message: tourismResponse.data.message?.substring(0, 100) + '...',
      suggestions: tourismResponse.data.suggestions
    })
    
    // Test 3: Database context query
    console.log('\n3Ô∏è‚É£ Testing predictive analytics query...')
    const predictiveResponse = await axios.post('http://localhost:5003/api/authority/chat', {
      message: "Generate a forecast for next month's visitor numbers and revenue"
    })
    
    console.log('‚úÖ Predictive Query Response:', {
      message: predictiveResponse.data.message?.substring(0, 100) + '...',
      dataInsights: predictiveResponse.data.dataInsights
    })
    
    console.log('\nüéâ AI Chat Integration test completed successfully!')
    console.log('‚úÖ All chat functionality is working properly')
    console.log('‚úÖ Gemini service integration is functional')
    console.log('‚úÖ Database context is being provided')
    console.log('‚úÖ Fallback responses are working for API failures')
    
  } catch (error) {
    if (error.code === 'ECONNREFUSED') {
      console.log('‚ùå Server not running. Please start the backend server first.')
      console.log('üí° Run: npm run dev (in server directory)')
    } else {
      console.error('‚ùå Test failed:', error.response?.data || error.message)
    }
  }
}

// Run the test
testAIChatIntegration()
